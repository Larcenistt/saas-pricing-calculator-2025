name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ==================== QUALITY CHECKS ====================
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm run lint
        
      - name: Run Prettier
        run: pnpm run format:check
        
      - name: TypeScript type checking
        run: pnpm run type-check

  # ==================== BACKEND TESTS ====================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Setup test environment
        working-directory: ./backend
        run: |
          cp .env.test.example .env.test
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/test_db" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          
      - name: Run Prisma migrations
        working-directory: ./backend
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          
      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:unit
        
      - name: Run backend integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret
          
      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage
        
      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ==================== FRONTEND TESTS ====================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run frontend unit tests
        run: npm run test:unit
        
      - name: Run frontend component tests
        run: npm run test:components
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ==================== E2E TESTS ====================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [quality, backend-test, frontend-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10
          
      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          
      - name: Start backend server
        working-directory: ./backend
        run: |
          npm run build
          npm start &
          sleep 5
        env:
          NODE_ENV: test
          PORT: 3001
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          
      - name: Start frontend server
        run: |
          npm run build
          npm run preview &
          sleep 5
        env:
          VITE_API_URL: http://localhost:3001/api/v1
          
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
          
      - name: Upload E2E videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 3

  # ==================== SECURITY SCAN ====================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: |
          npm audit --audit-level=high
          cd backend && npm audit --audit-level=high
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==================== BUILD & DEPLOY ====================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, backend-test, frontend-test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Build frontend
        run: |
          npm ci
          npm run build
        env:
          VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          VITE_GA_TRACKING_ID: ${{ secrets.GA_TRACKING_ID }}
          
      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build
          
      - name: Build Docker images
        run: |
          docker build -t saas-pricing-frontend:${{ github.sha }} .
          docker build -t saas-pricing-backend:${{ github.sha }} ./backend
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            backend/dist/
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.predictionnexus.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: Deploy to Vercel (Staging)
        run: |
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} \
            --env VITE_API_URL=${{ secrets.STAGING_API_URL }} \
            --env VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_TEST_KEY }}
            
      - name: Deploy backend to staging
        run: |
          echo "Deploy backend to staging infrastructure"
          # Add your backend deployment commands here
          
      - name: Run smoke tests
        run: |
          npm run test:smoke
        env:
          BASE_URL: https://staging.predictionnexus.com

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://predictionnexus.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: Deploy to Vercel (Production)
        run: |
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} \
            --env VITE_API_URL=${{ secrets.PRODUCTION_API_URL }} \
            --env VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_LIVE_KEY }}
            
      - name: Deploy backend to production
        run: |
          echo "Deploy backend to production infrastructure"
          # Add your backend deployment commands here
          
      - name: Run smoke tests
        run: |
          npm run test:smoke
        env:
          BASE_URL: https://predictionnexus.com
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ==================== MONITORING ====================
  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://predictionnexus.com
            https://predictionnexus.com/calculator
            https://predictionnexus.com/pricing
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Format Lighthouse results
        uses: actions/github-script@v6
        with:
          script: |
            const results = require('./lighthouse-results.json');
            const comment = `
            ## 🚦 Lighthouse Results
            
            | Page | Performance | Accessibility | Best Practices | SEO |
            |------|------------|---------------|----------------|-----|
            ${results.map(r => `| ${r.url} | ${r.performance} | ${r.accessibility} | ${r.bestPractices} | ${r.seo} |`).join('\n')}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });