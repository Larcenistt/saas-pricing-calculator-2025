import jsPDF from 'jspdf';
import 'jspdf-autotable';

export const exportToPDFEnhanced = (results) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(28);
  doc.setTextColor(31, 41, 55); // gray-800
  doc.text('Pricing Strategy Report', 105, 25, { align: 'center' });
  
  // Subtitle
  doc.setFontSize(12);
  doc.setTextColor(107, 114, 128); // gray-500
  doc.text('SaaS Pricing Calculator 2025', 105, 35, { align: 'center' });
  doc.text(new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }), 105, 42, { align: 'center' });
  
  // Executive Summary Box
  doc.setFillColor(249, 250, 251); // gray-50
  doc.setDrawColor(229, 231, 235); // gray-200
  doc.roundedRect(15, 55, 180, 35, 3, 3, 'FD');
  
  doc.setFontSize(14);
  doc.setTextColor(31, 41, 55);
  doc.setFont(undefined, 'bold');
  doc.text('Executive Summary', 20, 65);
  
  doc.setFontSize(11);
  doc.setFont(undefined, 'normal');
  doc.text(`Recommended Price Point: $${results.metrics.recommendedPrice}/month`, 20, 75);
  doc.text(`Projected Annual Revenue: $${results.metrics.yearlyRevenue.toLocaleString()}`, 20, 82);
  
  // Pricing Tiers Table
  doc.setFontSize(16);
  doc.setFont(undefined, 'bold');
  doc.setTextColor(31, 41, 55);
  doc.text('Recommended Pricing Structure', 15, 105);
  
  // Prepare table data
  const tableData = Object.values(results.tiers).map(tier => [
    tier.name,
    `$${tier.price}/mo`,
    tier.features.slice(0, 2).join('\n'), // First 2 features
    tier.recommended ? 'RECOMMENDED' : ''
  ]);
  
  // Create table
  doc.autoTable({
    startY: 110,
    head: [['Plan', 'Price', 'Key Features', 'Status']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246], // blue-500
      textColor: 255,
      fontSize: 12,
      fontStyle: 'bold'
    },
    bodyStyles: {
      fontSize: 10,
      cellPadding: 5
    },
    columnStyles: {
      0: { cellWidth: 40 },
      1: { cellWidth: 35, halign: 'center', fontStyle: 'bold' },
      2: { cellWidth: 85 },
      3: { cellWidth: 35, halign: 'center' }
    },
    alternateRowStyles: {
      fillColor: [249, 250, 251] // gray-50
    }
  });
  
  // Key Metrics
  const finalY = doc.lastAutoTable.finalY + 15;
  
  doc.setFontSize(16);
  doc.setFont(undefined, 'bold');
  doc.text('Revenue Projections', 15, finalY);
  
  // Metrics table
  const metricsData = [
    ['Monthly Revenue', `$${results.metrics.monthlyRevenue.toLocaleString()}`],
    ['Annual Revenue', `$${results.metrics.yearlyRevenue.toLocaleString()}`],
    ['vs. Competitor', `${results.metrics.competitorComparison > 0 ? '+' : ''}${results.metrics.competitorComparison}%`],
    ['Churn Impact', `$${results.metrics.churnImpact.toLocaleString()}/year`]
  ];
  
  doc.autoTable({
    startY: finalY + 5,
    body: metricsData,
    theme: 'plain',
    bodyStyles: {
      fontSize: 11
    },
    columnStyles: {
      0: { cellWidth: 80, fontStyle: 'bold' },
      1: { cellWidth: 60, halign: 'right' }
    }
  });
  
  // Next Steps
  const nextStepsY = doc.lastAutoTable.finalY + 15;
  
  doc.setFontSize(16);
  doc.setFont(undefined, 'bold');
  doc.text('Implementation Roadmap', 15, nextStepsY);
  
  doc.setFontSize(10);
  doc.setFont(undefined, 'normal');
  const steps = [
    '✓ Update website pricing page with new tiers',
    '✓ Create migration plan for existing customers',
    '✓ Update sales collateral and documentation',
    '✓ Train customer success team on new pricing',
    '✓ Set up tracking for conversion metrics',
    '✓ Plan 30-day review to assess impact'
  ];
  
  steps.forEach((step, index) => {
    doc.text(step, 20, nextStepsY + 10 + (index * 7));
  });
  
  // Footer
  doc.setFontSize(9);
  doc.setTextColor(156, 163, 175); // gray-400
  doc.text('This report contains confidential pricing strategy information', 105, 280, { align: 'center' });
  doc.text('Generated by SaaS Pricing Calculator 2025 | saaspricingcalculator.com', 105, 285, { align: 'center' });
  
  // Save
  doc.save(`pricing-strategy-${new Date().toISOString().split('T')[0]}.pdf`);
};