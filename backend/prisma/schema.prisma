// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  name              String?
  company           String?
  role              Role      @default(USER)
  emailVerified     Boolean   @default(false) @map("email_verified")
  emailVerifyToken  String?   @unique @map("email_verify_token")
  resetToken        String?   @unique @map("reset_token")
  resetTokenExpiry  DateTime? @map("reset_token_expiry")
  isActive          Boolean   @default(true) @map("is_active")
  lastLogin         DateTime? @map("last_login")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  calculations      Calculation[]
  teams             TeamMember[]
  ownedTeams        Team[]
  subscription      Subscription?
  apiKeys           ApiKey[]
  analyticsEvents   AnalyticsEvent[]
  refreshTokens     RefreshToken[]
  calculationVersions CalculationVersion[]

  @@map("users")
}

// Team model for collaboration
model Team {
  id          String   @id @default(uuid())
  name        String
  ownerId     String   @map("owner_id")
  plan        TeamPlan @default(TEAM)
  seatsLimit  Int      @default(5) @map("seats_limit")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  owner       User         @relation(fields: [ownerId], references: [id])
  members     TeamMember[]
  calculations Calculation[]

  @@map("teams")
}

// Team member junction table
model TeamMember {
  teamId    String   @map("team_id")
  userId    String   @map("user_id")
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([teamId, userId])
  @@map("team_members")
}

// Calculation model for storing pricing calculations
model Calculation {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  teamId       String?  @map("team_id")
  name         String
  inputs       Json
  results      Json
  version      Int      @default(1)
  isPublic     Boolean  @default(false) @map("is_public")
  shareToken   String?  @unique @map("share_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user     User                 @relation(fields: [userId], references: [id])
  team     Team?                @relation(fields: [teamId], references: [id])
  versions CalculationVersion[]

  @@index([userId])
  @@index([teamId])
  @@index([createdAt])
  @@map("calculations")
}

// Calculation version history
model CalculationVersion {
  id             String   @id @default(uuid())
  calculationId  String   @map("calculation_id")
  version        Int
  inputs         Json
  results        Json
  changedById    String   @map("changed_by_id")
  changeNote     String?  @map("change_note")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  calculation Calculation @relation(fields: [calculationId], references: [id], onDelete: Cascade)
  changedBy   User        @relation(fields: [changedById], references: [id])

  @@unique([calculationId, version])
  @@map("calculation_versions")
}

// Subscription model for Stripe integration
model Subscription {
  id                   String   @id @default(uuid())
  userId               String   @unique @map("user_id")
  stripeSubscriptionId String?  @unique @map("stripe_subscription_id")
  stripeCustomerId     String?  @map("stripe_customer_id")
  plan                 Plan
  status               SubscriptionStatus
  currentPeriodStart   DateTime? @map("current_period_start")
  currentPeriodEnd     DateTime? @map("current_period_end")
  cancelAtPeriodEnd    Boolean  @default(false) @map("cancel_at_period_end")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

// API Keys for integrations
model ApiKey {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  keyHash    String    @unique @map("key_hash")
  name       String
  lastUsed   DateTime? @map("last_used")
  usageCount Int       @default(0) @map("usage_count")
  rateLimit  Int       @default(1000) @map("rate_limit")
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

// Analytics Events for tracking
model AnalyticsEvent {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  eventType  String   @map("event_type")
  eventData  Json?    @map("event_data")
  sessionId  String?  @map("session_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@map("analytics_events")
}

// Refresh Token model for JWT refresh
model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TeamPlan {
  TEAM
  BUSINESS
  ENTERPRISE
}

enum Plan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
  PAUSED
}